from pyrogram import Client
from pyrogram.types import CallbackQuery, Message

from filters.get_statistic_filters import filter_ask_user_for_comp_id, filter_get_statistic_from_keitaro, \
    get_statistic_from_period_filter
from keyboards.bot_keyboards import CANCEL_AND_CLEAR_STATE_KBRD, statistic_keyboard
from secondary_functions.req_to_bot_api import get_link_owner
from secondary_functions.requests_to_other_services import post_req_to_keitaro_for_get_stat_by_comp_id
from settings.config import STATES_STORAGE_DCT


@Client.on_callback_query(filter_ask_user_for_comp_id)
async def ask_user_for_company_id_handler(client, update: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É —é–∑–µ—Ä–∞ ID –∫–æ–º–ø–∞–Ω–∏–∏, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.edit_message_text(
        text='üìä–ü—Ä–∏—à–ª–∏—Ç–µ <b>ID —Å—Å—ã–ª–∫–∏</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.',
        reply_markup=CANCEL_AND_CLEAR_STATE_KBRD
    )
    STATES_STORAGE_DCT[update.from_user.id] = 'send_company_id_for_get_statistic'


@Client.on_message(filter_get_statistic_from_keitaro)
async def get_statistic_from_keitaro(client, update: Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ KEITARO.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–Ω –≤–µ—Ä–Ω—ã–π ID –∫–æ–º–ø–∞–Ω–∏–∏
    if not update.text.isdigit():
        await update.reply_text(
            text=f'‚ùóÔ∏è<b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID</b>\nüî¢ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä.\n\n'
                 f'üìÑ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç-—Å—Å—ã–ª–∫–∞–º–∏</b>. '
                 f'–í –Ω—ë–º, <b>–Ω–∏–∂–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏</b> —É–∫–∞–∑–∞–Ω <b>ID –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>.',
            reply_markup=CANCEL_AND_CLEAR_STATE_KBRD
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü —Å—Å—ã–ª–∫–∏
    check_owner = await get_link_owner(company_id=int(update.text))
    if not check_owner or int(check_owner.get('link_owner')) != int(update.from_user.id):
        await update.reply_text(
            text=f'ü§∑‚Äç‚ôÇÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å ID {update.text}.\n' \
                 f'–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –í–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.\n\n' \
                 f'üÜî<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Å—ã–ª–∫–∏.</b>',
            reply_markup=CANCEL_AND_CLEAR_STATE_KBRD
        )
        return

    # –û—á–∏—â–∞–µ–º —Å—Ç—ç–π—Ç
    STATES_STORAGE_DCT.pop(update.from_user.id)
    info_msg = await update.reply_text(
        text=f'üì°–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ...'
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–µ–π—Ç–∞—Ä–æ
    response = await post_req_to_keitaro_for_get_stat_by_comp_id(company_id=int(update.text))

    response_comp_id = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã</i>'
    all_clicks = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ 0</i>'
    unique_clicks = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ 0</i>'

    if response:
        for i_elem in response:  # –í –æ—Ç–≤–µ—Ç–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π, –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –Ω–∏–º

            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ body –ª–µ–∂–∏—Ç rows = [–ø–æ—Ç–æ–∫ –¥–ª—è –±–æ—Ç–æ–≤, –æ—Å–Ω. –ø–æ—Ç–æ–∫]
            if i_elem.get('body') and i_elem.get('body').get('rows'):
                for j_elem in i_elem.get('body').get('rows'):
                    if j_elem.get('stream') == 'RedirectStream':  # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∏ –∑–∞–±–∏—Ä–∞–µ–º –∫–ª–∏–∫–∏
                        all_clicks = j_elem.get('clicks')
                        unique_clicks = j_elem.get('stream_unique_clicks')

            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å c body, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—â—ë –ª–µ–∂–∏—Ç ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
            if i_elem.get('body') and i_elem.get('body').get('id') and i_elem.get('body').get('name'):
                response_comp_id = i_elem.get('body').get('id')

    text_for_message = f'üìÜ–ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: <b>—Å–µ–≥–æ–¥–Ω—è</b>\n\n' \
                       f'üîó<b>–°—Å—ã–ª–∫–∞:</b> {response_comp_id}\n' \
                       f'üö∂<b>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {all_clicks}\n' \
                       f'üö∂‚Äç‚ôÇÔ∏è<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {unique_clicks}\n'

    # –î–∞—ë–º –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await info_msg.edit_text(
        text=text_for_message,
        reply_markup=await statistic_keyboard(company_id=update.text)
    )


@Client.on_callback_query(get_statistic_from_period_filter)
async def get_statistic_from_period(client, update):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –∫–µ–π—Ç–∞—Ä–æ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ company_id
    """

    info_msg = await update.edit_message_text(
        text=f'üì°–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ...'
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∫–µ–π—Ç–∞—Ä–æ
    response = await post_req_to_keitaro_for_get_stat_by_comp_id(
        company_id=update.data.split()[1],
        period=update.data.split()[2],
    )

    response_comp_id = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã</i>'
    all_clicks = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ 0</i>'
    unique_clicks = '<i>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ 0</i>'

    if response:
        for i_elem in response:  # –í –æ—Ç–≤–µ—Ç–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π, –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –Ω–∏–º

            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ body –ª–µ–∂–∏—Ç rows = [–ø–æ—Ç–æ–∫ –¥–ª—è –±–æ—Ç–æ–≤, –æ—Å–Ω. –ø–æ—Ç–æ–∫]
            if i_elem.get('body') and i_elem.get('body').get('rows'):
                for j_elem in i_elem.get('body').get('rows'):
                    if j_elem.get('stream') == 'RedirectStream':  # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∏ –∑–∞–±–∏—Ä–∞–µ–º –∫–ª–∏–∫–∏
                        all_clicks = j_elem.get('clicks')
                        unique_clicks = j_elem.get('stream_unique_clicks')

            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å c body, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—â—ë –ª–µ–∂–∏—Ç ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
            if i_elem.get('body') and i_elem.get('body').get('id') and i_elem.get('body').get('name'):
                response_comp_id = i_elem.get('body').get('id')

    stat_periods = {
        "today": "—Å–µ–≥–æ–¥–Ω—è",
        "yesterday": "–≤—á–µ—Ä–∞",
        "last_monday": "—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è",
        "7_days_ago": "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
        "first_day_of_this_month": "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü",
        "previous_month": "–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü",
        "1_month_ago": "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
        "first_day_of_this_year": "—Ç–µ–∫—É—â–∏–π –≥–æ–¥",
        "1_year_ago": "–∑–∞ –≥–æ–¥",
        "all_time": "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è",
    }
    text_for_message = f'üìÜ–ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: <b>{stat_periods.get(update.data.split()[2])}</b>\n\n' \
                       f'üîó<b>–°—Å—ã–ª–∫–∞:</b> {response_comp_id}\n' \
                       f'üö∂<b>–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {all_clicks}\n' \
                       f'üö∂‚Äç‚ôÇÔ∏è<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:</b> {unique_clicks}\n'

    # –î–∞—ë–º –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await info_msg.edit_text(
        text=text_for_message,
        reply_markup=await statistic_keyboard(update.data.split()[1])
    )

